<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Fanlz's Blog]]></title>
  <subtitle><![CDATA[JUST DO FE !]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://fanlz.com/"/>
  <updated>2015-11-28T08:17:45.000Z</updated>
  <id>http://fanlz.com/</id>
  
  <author>
    <name><![CDATA[Fanlz]]></name>
    <email><![CDATA[fanlzcn@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[创建Object的几种方式]]></title>
    <link href="http://fanlz.com/2015/11/28/create-object/"/>
    <id>http://fanlz.com/2015/11/28/create-object/</id>
    <published>2015-11-28T08:07:10.000Z</published>
    <updated>2015-11-28T08:17:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/2e6559acdcc93359f736ecfc54ce7523.jpg" alt=""><br>常用的创建对象的方法有工厂模式、构造函数模式、原型模式、组合使用构造函数模式和原型模式、动态原型模式、寄生构造函数模式、稳妥构造函数模式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.工厂模式：解决了创建多个相似对象的问题，却没有解决对象识别的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'fan'</span>,<span class="number">22</span>,<span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'lz'</span>,<span class="number">21</span>,<span class="string">'Teacher'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.构造函数模式: 可以将它的实例标识为一种特定的类型 instanceof,</span></span><br><span class="line"><span class="comment">//                每个方法都要在每个实例上重新创建一遍</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'fan'</span>,<span class="number">22</span>,<span class="string">'Software Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'lz'</span>,<span class="number">21</span>,<span class="string">'Teacher'</span>);</span><br><span class="line"><span class="comment">//使用new操作符经历的步骤；</span></span><br><span class="line"><span class="comment">// 1.创建一个新对象</span></span><br><span class="line"><span class="comment">// 2.将构造函数的作用域赋给新对象</span></span><br><span class="line"><span class="comment">// 3.执行构造函数中的代码（为新对象添加属性）</span></span><br><span class="line"><span class="comment">// 4.返回新对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.原型模式  所有属性被实例共享，容易牵一发而动全身</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'fanlz'</span>;</span><br><span class="line">Person.prototype.age = <span class="number">22</span>;</span><br><span class="line">Person.prototype.job = <span class="string">'Software Engineer'</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();  <span class="comment">//'fanlz'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName();  <span class="comment">//'fanlz'</span></span><br><span class="line"></span><br><span class="line">alert(person1.sayName == person2.sayName); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">alert(Person.prototype.isPrototypeOf(person1)); <span class="comment">//true</span></span><br><span class="line">alert(Person.prototype.isPrototypeOf(person2)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">Object</span>.getPrototypeOf(person1) == Person.prototype); <span class="comment">//true  ES5 返回[[Prototype]]的值</span></span><br><span class="line"></span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//false 检测一个属性是存在与实例中还是原型中</span></span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">Object</span>.keys(Person.prototype)) <span class="comment">// ES5 取得对象所有可枚举的实例属性</span></span><br><span class="line">alert(<span class="built_in">Object</span>.getOwnPtopertyNames(Person.prototype)) <span class="comment">//取得所有实例属性，不论是否可枚举</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更简单的原型语法  相当于重写了它的prototype对象 constructor 不再指向Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name:<span class="string">'fanlz'</span>,</span><br><span class="line">    age:<span class="number">22</span>,</span><br><span class="line">    job:<span class="string">'Software Engineer'</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.组合使用构造函数模式和原型模式 (目前使用最广泛认同度最高的创建自定义类型的方法)</span></span><br><span class="line"><span class="comment">//所有实例属性在构造函数中定义，所有实例共享属性方法在原型中定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.friends = [<span class="string">'Shelby'</span>,<span class="string">'Court'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.动态原型模式</span></span><br><span class="line"><span class="comment">//所有信息封装在构造函数中，通过构造函数初始化原型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>) &#123;</span><br><span class="line">        Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.寄生构造函数模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">'fanlz'</span>,<span class="number">22</span>,<span class="string">'Software Engineer'</span>);</span><br><span class="line">friend.sayName(); <span class="comment">//'fanlz'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.稳妥构造函数模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考文章：<a href="https://book.douban.com/subject/10546125/" target="_blank" rel="external">JavaScript高级程序设计</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/2e6559acdcc93359f736ecfc54ce7523.jpg" alt=""><br>常用的创建对象的方法有工厂模式、构造函数模式、原型模式、组合使用构造]]>
    </summary>
    
      <category term="javascript" scheme="http://fanlz.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[块级元素与行内元素]]></title>
    <link href="http://fanlz.com/2015/07/25/block-inline/"/>
    <id>http://fanlz.com/2015/07/25/block-inline/</id>
    <published>2015-07-25T08:10:10.000Z</published>
    <updated>2015-09-16T06:55:00.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/e7c53f5de79f1d025565d265eb377157.jpg" alt=""><br>对于前端新手来说，第一次对HTML排版感到困惑，可能是没有正确区分块级元素和行内元素，因为这两种元素与生俱来的特性是有一些区别的，常常导致很多样式不能出现理想的效果。通常从CSS样式来说，HTML元素可以简单的分为块级元素(block-level elements)和行内元素(inline elements)。</p>
<p>块级元素 一个块级元素大致有以下特性：</p>
<ul>
<li>如果没有设置宽度width，会自动伸展宽度撑满父级元素</li>
<li>可以设置margin/padding值</li>
<li>如果没有设置高度height，高度自动适应子元素的高度(假定没有浮动或定位)</li>
<li>默认情况下，会自动位于前一个元素的下面(假定没有浮动或定位)</li>
<li>忽略vertical-align 属性<br>所以对于一个块级元素来说，如果想要其撑满父级元素的宽度，不必要设置宽度。如果设置宽度可能还会导致其它问题。而且不必要用clear去清一个块级元素，假定没有浮动或定位的话，它会自动另起一行。</li>
</ul>
<p>行内元素  一个行内元素大致具有以下特性：</p>
<ul>
<li>随着文本内容流向排列</li>
<li>不会像块级元素一样另起一行</li>
<li>会忽略margin/padding的top和bottom值，应用left和right值</li>
<li>忽略设置的width/height属性</li>
<li>如果设置为向左或向右浮动(float)，则自动表现为块级元素具有块级元素特性</li>
<li>可以应用vertical-align 属性<br>标注：一般来说，块级元素可以包含块级元素或行内元素，行内元素中只能包含行内元素。但有一个例外是，a 元素可以包含任何元素。你也可以改变一个元素的表现为块或行元素通过display:block或者display:inline属性。另外除了块级元素和行内元素外，其实还有一种介于两者之间，具有两者特性的元素类型，那就是inline-block元素，它可以像行内元素一样流动排列，也具有块级元素的块级结构表现。</li>
</ul>
<p>如果你是刚开始学习CSS，弄清这两种元素间的区别将会帮助你在以后的样式控制中更得心应手，而不是过度使用浮动布局或其它糟糕的方式。</p>
<p>常用块级元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">address</span>&gt;</span>	定义地址</span><br><span class="line"><span class="tag">&lt;<span class="title">caption</span>&gt;</span>	定义表格标题</span><br><span class="line"><span class="tag">&lt;<span class="title">dd</span>&gt;</span>		定义列表中定义条目</span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span>		定义文档中的分区或节</span><br><span class="line"><span class="tag">&lt;<span class="title">dl</span>&gt;</span>		定义列表</span><br><span class="line"><span class="tag">&lt;<span class="title">dt</span>&gt;</span>		定义列表中的项目</span><br><span class="line"><span class="tag">&lt;<span class="title">form</span>&gt;</span>		创建 HTML 表单</span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>~<span class="tag">&lt;<span class="title">h6</span>&gt;</span>	定义标题</span><br><span class="line"><span class="tag">&lt;<span class="title">hr</span>&gt;</span>		创建一条水平线</span><br><span class="line"><span class="tag">&lt;<span class="title">li</span>&gt;</span>		标签定义列表项目</span><br><span class="line"><span class="tag">&lt;<span class="title">ol</span>&gt;</span>		定义有序列表</span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span>		定义无序列表</span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>			标签定义段落</span><br><span class="line"><span class="tag">&lt;<span class="title">pre</span>&gt;</span>		定义预格式化的文本</span><br><span class="line"><span class="tag">&lt;<span class="title">table</span>&gt;</span>		标签定义 HTML 表格</span><br><span class="line"><span class="tag">&lt;<span class="title">tbody</span>&gt;</span>		标签表格主体（正文）</span><br><span class="line"><span class="tag">&lt;<span class="title">td</span>&gt;</span>		表格中的标准单元格</span><br><span class="line"><span class="tag">&lt;<span class="title">tfoot</span>&gt;</span>		定义表格的页脚（脚注或表注）</span><br><span class="line"><span class="tag">&lt;<span class="title">th</span>&gt;</span>		定义表头单元格</span><br><span class="line"><span class="tag">&lt;<span class="title">thead</span>&gt;</span>		标签定义表格的表头</span><br><span class="line"><span class="tag">&lt;<span class="title">tr</span>&gt;</span>		定义表格中的行</span><br></pre></td></tr></table></figure></p>
<p>常用行内元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span>&gt;</span>			标签可定义锚</span><br><span class="line"><span class="tag">&lt;<span class="title">abbr</span>&gt;</span>		表示一个缩写形式</span><br><span class="line"><span class="tag">&lt;<span class="title">acronym</span>&gt;</span>	定义只取首字母缩写</span><br><span class="line"><span class="tag">&lt;<span class="title">b</span>&gt;</span>			字体加粗</span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span>		换行</span><br><span class="line"><span class="tag">&lt;<span class="title">cite</span>&gt;</span>		引用进行定义</span><br><span class="line"><span class="tag">&lt;<span class="title">em</span>&gt;</span>		定义为强调的内容</span><br><span class="line"><span class="tag">&lt;<span class="title">i</span>&gt;</span>			斜体文本效果</span><br><span class="line"><span class="tag">&lt;<span class="title">img</span>&gt;</span>		向网页中嵌入一幅图像</span><br><span class="line"><span class="tag">&lt;<span class="title">input</span>&gt;</span>		输入框</span><br><span class="line"><span class="tag">&lt;<span class="title">label</span>&gt;</span>		标签为 input 元素定义标注（标记）</span><br><span class="line"><span class="tag">&lt;<span class="title">select</span>&gt;</span>	创建单选或多选菜单</span><br><span class="line"><span class="tag">&lt;<span class="title">small</span>&gt;</span>		呈现小号字体效果</span><br><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span>		组合文档中的行内元素</span><br><span class="line"><span class="tag">&lt;<span class="title">strong</span>&gt;</span>	语气更强的强调的内容</span><br><span class="line"><span class="tag">&lt;<span class="title">sub</span>&gt;</span>		定义下标文本</span><br><span class="line"><span class="tag">&lt;<span class="title">sup</span>&gt;</span>		定义上标文本</span><br><span class="line"><span class="tag">&lt;<span class="title">textarea</span>&gt;</span>	多行的文本输入控件</span><br></pre></td></tr></table></figure></p>
<p>参考文章：<a href="http://www.impressivewebs.com/difference-block-inline-css/" target="_blank" rel="external">The Difference Between “Block” and “Inline”</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/e7c53f5de79f1d025565d265eb377157.jpg" alt=""><br>对于前端新手来说，第一次对HTML排版感到困惑，可能是没有正确区分块]]>
    </summary>
    
      <category term="html" scheme="http://fanlz.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS选择器]]></title>
    <link href="http://fanlz.com/2015/07/24/css-selector/"/>
    <id>http://fanlz.com/2015/07/24/css-selector/</id>
    <published>2015-07-24T00:10:18.000Z</published>
    <updated>2015-08-31T12:42:46.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/6295e8ae1ac742cfa7c20a1b8b37c4fb.jpg" alt=""></p>
<p>CSS(层叠样式表)是一门控制文档以何种方式呈现的语言，它可以控制元素的宽高、边距、背景、字体的颜色、大小等等，用来为结构化文档(如HTML)添加样式。CSS用来将文档的结构和样式分离开来，使文档结构更清晰，可维护性强。应用CSS主要通过CSS选择器选中目标文档元素，并添加相应样式，可见CSS选择器的灵活使用是CSS的重点，下面介绍几种常用的CSS选择器以及他们的优先级。</p>
<p>常用选择器:</p>
<p>*  通用选择器<br>#id  id选择器<br>.class  class选择器<br>p 元素标签选择器<br>[title] 属性选择器<br>[title=value] 属性选择器<br>p span    后代选择器<br>h1&gt; strong 子元素选择器<br>h1 + p  相邻兄弟选择器<br>a:hover 伪类选择器<br>h1:after 伪元素选择器</p>
<p>应用实例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*<span class="rules">&#123;<span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>;&#125;</span></span><br><span class="line"><span class="id">#id</span><span class="rules">&#123;<span class="rule"><span class="attribute">backrgound</span>:<span class="value"><span class="hexcolor">#ccc</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.class</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-weight</span>:<span class="value">bold&#125;</span><br><span class="line">p.class&#123;color:<span class="hexcolor">#000</span></span></span>;&#125;</span></span><br><span class="line"><span class="tag">h1</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">20px</span></span></span>;&#125;</span></span><br><span class="line"><span class="tag">a</span><span class="attr_selector">[href]</span><span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#000</span></span></span>;&#125;</span></span><br><span class="line"><span class="tag">input</span><span class="attr_selector">[type="text"]</span><span class="rules">&#123;<span class="rule"><span class="attribute">padding-left</span>:<span class="value"><span class="number">10px</span></span></span>;&#125;</span></span><br><span class="line"><span class="tag">p</span> <span class="tag">span</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">12px</span></span></span>;&#125;</span></span><br><span class="line"><span class="tag">h1</span>&gt;<span class="tag">strong</span><span class="rules">&#123;<span class="rule"><span class="attribute">font-weight</span>:<span class="value">bold</span></span>;&#125;</span></span><br><span class="line"><span class="tag">h1</span>+<span class="tag">p</span><span class="rules">&#123;<span class="rule"><span class="attribute">margin-top</span>:<span class="value"><span class="number">10px</span></span></span>;&#125;</span></span><br><span class="line"><span class="rule"><span class="attribute">a</span>:<span class="value">hover&#123;color:<span class="hexcolor">#ccc</span></span></span>;&#125;</span><br><span class="line"><span class="tag">h1</span><span class="pseudo">:after</span><span class="rules">&#123;<span class="rule"><span class="attribute">content</span>:<span class="value"><span class="string">""</span>,display:block</span></span>;<span class="rule"><span class="attribute">clear</span>:<span class="value">both</span></span>;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>选择器的优先级<br>我们知道，CSS很多样式是可以继承的，并且一般来说写在后面的样式会覆盖掉之前的样式，但是当我们写CSS的时候我们必须注意有些选择器在级联(cascade)上会高于其它选择器，我们写在最后面的选择器将不一定会覆盖前面我们写在同一个元素的样式，这就是不同选择器的优先级不同导致的，下面的列表的选择器优先级是逐级增加的：</p>
<ul>
<li>通用选择器（*）</li>
<li>元素(类型)选择器</li>
<li>类选择器</li>
<li>属性选择器</li>
<li>伪类</li>
<li>ID 选择器</li>
<li>内联样式</li>
</ul>
<p>另外，除了这些还有 !important 规则，当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里。但是要记得使用 !important 规则不是一个好习惯。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/6295e8ae1ac742cfa7c20a1b8b37c4fb.jpg" alt=""></p>
<p>CSS(层叠样式表)是一门控制文档以何种方式呈现的语言，它可]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS水平居中常用方法]]></title>
    <link href="http://fanlz.com/2015/07/21/horizontal-center/"/>
    <id>http://fanlz.com/2015/07/21/horizontal-center/</id>
    <published>2015-07-21T00:15:38.000Z</published>
    <updated>2015-09-01T14:03:38.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/6097959e8b2e499230f707807971096f.jpg" alt=""></p>
<h2 id="方法一">方法一</h2><p>平时我们用的最多的方法，通过确定元素的宽度，并且设定元素margin为auto，例如：</p>
<p></p><p data-height="182" data-theme-id="18430" data-slug-hash="jbOzPZ" data-default-tab="result" data-user="fanlz" class="codepen">See the Pen <a href="http://codepen.io/fanlz/pen/jbOzPZ/" target="_blank" rel="external">jbOzPZ</a> by fanlz (<a href="http://codepen.io/fanlz" target="_blank" rel="external">@fanlz</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><br>但是使用这种方法必须设定元素的宽度，但是很多时候我们不知道元素的宽度的，换句话说就是元素的宽度是不固定的，这时候应该怎么办呢？其实使用CSS水平居中的方式有多种，这里我们以简单的分页列表为例来说明居中的方式：</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/6097959e8b2e499230f707807971096f.jpg" alt=""></p>
<h2 id="方法一">方法一</h2><p>平时我们用的最多的]]>
    </summary>
    
      <category term="css" scheme="http://fanlz.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS垂直居中的几种方法]]></title>
    <link href="http://fanlz.com/2015/07/13/vertical-align-center/"/>
    <id>http://fanlz.com/2015/07/13/vertical-align-center/</id>
    <published>2015-07-13T00:15:28.000Z</published>
    <updated>2015-08-31T12:43:16.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/228a7d4c6bcf00c7e97d4d39abb632d4.jpg" alt=""></p>
<p>##方法一<br>把div的显示方式设置为表格，即可使用表格的vertical-align属性<br>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"cell"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>content<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.wrapper</span><span class="rules">&#123;<span class="rule"><span class="attribute">display</span>:<span class="value">table</span></span>;&#125;</span></span><br><span class="line"><span class="class">.cell</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">table-cell</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value">middle</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="优点:">优点:</h3><p>content 可以动态改变高度，当wrapper里没有足够空间时，content不会被截断</p>
<h3 id="缺点:">缺点:</h3><p>老的IE版本中无效，嵌套标签多</p>
<h2 id="方法二">方法二</h2><p>使用绝对定位，把div的top设置为50%，margin-top设置为负的一半content高度，这意味着元素必须在css中指定固定高度<br>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span>content<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.content</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value">absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">50%</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">240px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin-top</span>:<span class="value">-<span class="number">120px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="优点:-1">优点:</h3><p>浏览器兼容性好，不需要嵌套标签</p>
<h3 id="缺点:-1">缺点:</h3><p>content的高度固定，没有足够空间时，content会隐藏</p>
<h2 id="方法三">方法三</h2>]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://fanpic-img.stor.sinaapp.com/original/228a7d4c6bcf00c7e97d4d39abb632d4.jpg" alt=""></p>
<p>##方法一<br>把div的显示方式设置为表格，即可使用表格]]>
    </summary>
    
      <category term="css" scheme="http://fanlz.com/tags/css/"/>
    
  </entry>
  
</feed>
